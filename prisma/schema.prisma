// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  googleId      String?   @unique
  googleEmail   String?
  isAdmin       Boolean   @default(false)
  isPremium     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  posts       Post[]
  likes       Like[]
  comments    Comment[]
  tokens      Token[]
  subscription Subscription?
  wallet      Wallet?
  proposals   GovernanceProposal[] @relation(name: "Proposer")
  votes       GovernanceVote[]
  dividendClaims DividendClaim[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id              String    @id @default(cuid())
  content         String
  image           String?
  userId          String
  isPremium       Boolean   @default(false)
  nftId           String?   @unique
  totalTokenSupply Int      @default(1000000) // 1M tokens per post
  platformTokens  Int      @default(10000)   // Bitch@ owns 1% (10K tokens)
  availableTokens Int      @default(990000)  // 99% available for trading
  tokenPrice      Float    @default(0.0001) // Base price in USD cents
  likeCost        Float    @default(0.0001) // Cost in USD cents per like
  shareCost       Float    @default(0.001)  // Cost in USD cents per share
  commentCost     Float    @default(0.001)  // Cost in USD cents per comment
  acceptedCurrencies String @default("BSV,BTC,ETH,USD,EUR") // Comma-separated list
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
  tokens   Token[]
  proposals GovernanceProposal[]
  dividends DividendDistribution[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Token {
  id          String   @id @default(cuid())
  postId      String
  ownerId     String
  amount      Int      @default(1)
  purchasePrice Float  @default(0.0001) // Price paid per token
  acquiredVia  String? // 'like', 'share', 'purchase', 'platform'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  post  Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([postId, ownerId])
}

model Wallet {
  id          String   @id @default(cuid())
  userId      String   @unique
  walletType  String   @default("bsv") // bsv, btc, eth, etc.
  address     String   @unique
  balance     Float    @default(0)
  currency    String   @default("BSV") // BSV, BTC, ETH, USD, EUR, etc.
  exchangeRate Float   @default(1) // Rate to convert to BSV
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([walletType, currency])
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique
  stripeId      String   @unique
  status        String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GovernanceProposal {
  id          String   @id @default(cuid())
  postId      String
  title       String
  description String
  type        String   // "content_moderation", "revenue_sharing", "feature_unlock"
  status      String   @default("active") // "active", "passed", "rejected", "executed"
  proposerId  String
  votingPowerRequired Int @default(1000) // Minimum token holders needed to pass
  quorum      Float @default(0.1) // Minimum percentage of total tokens for quorum
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  votingEndsAt DateTime

  proposer    User @relation(name: "Proposer", fields: [proposerId], references: [id])
  post        Post @relation(fields: [postId], references: [id])
  votes       GovernanceVote[]

  @@index([status, votingEndsAt])
}

model GovernanceVote {
  id          String   @id @default(cuid())
  proposalId  String
  voterId     String
  vote        String   // "yes", "no", "abstain"
  votingPower Int // Number of tokens held by voter for this post
  createdAt   DateTime @default(now())

  proposal    GovernanceProposal @relation(fields: [proposalId], references: [id])
  voter       User @relation(fields: [voterId], references: [id])

  @@unique([proposalId, voterId])
}

model DividendDistribution {
  id            String   @id @default(cuid())
  postId        String
  totalAmount   Float
  amountPerToken Float
  distributionDate DateTime @default(now())
  status        String   @default("pending") // "pending", "distributing", "completed", "failed"
  transactionId String?

  post          Post @relation(fields: [postId], references: [id])
  claims        DividendClaim[]

  @@index([status, distributionDate])
}

model DividendClaim {
  id              String   @id @default(cuid())
  distributionId  String
  tokenHolderId   String
  amount          Float
  tokensHeld      Int
  claimedAt       DateTime?
  status          String   @default("pending") // "pending", "claimed", "expired"

  distribution    DividendDistribution @relation(fields: [distributionId], references: [id])
  tokenHolder     User @relation(fields: [tokenHolderId], references: [id])

  @@unique([distributionId, tokenHolderId])
}

